{"version":3,"sources":["component/Navbar.js","actions/ProductAction.js","component/HomePage.js","App.js","serviceWorker.js","reducers/ProductReducer.js","index.js"],"names":["Navbar","className","Component","proDetails","image","name","price","HomePage","this","props","proData","currencyToProps","dataAppened","dataFromReducer","currAppend","currncyFromReducer","map","item","index","key","src","alt","aria-hidden","parseInt","toFixed","id","onChange","e","target","value","connect","state","data","currncy","dispatch","a","type","payload","curr","fetch","fetchCurr","json","toJson","checkCurr","rates","ProductActionCurrency","App","Boolean","window","location","hostname","match","productState","ProductReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e9f595e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../css/Navbar.css\";\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <ul className=\"ul_header\">\r\n                    <li>Shopping Cart</li>\r\n                </ul>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default Navbar;","const proDetails = [\r\n    {\r\n        image: \"https://images.unsplash.com/photo-1512374382149-233c42b6a83b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80\",\r\n        name: \"Adidas\",\r\n        price: 100\r\n    },\r\n    {\r\n        image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRApu_nFlRM64aXFCtCEVhg7eRgGVVitMGtLfemn9VomtNvPBtEFQ&s\",\r\n        name: \"Nike\",\r\n        price: 500\r\n    },\r\n    {\r\n        image: \"https://images.unsplash.com/photo-1512374382149-233c42b6a83b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80\",\r\n        name: \"Puma\",\r\n        price: 1000\r\n    },\r\n    {\r\n        image: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRApu_nFlRM64aXFCtCEVhg7eRgGVVitMGtLfemn9VomtNvPBtEFQ&s\",\r\n        name: \"Nike\",\r\n        price: 500\r\n    }\r\n]\r\nexport const dataAction = () => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: \"GET_DATA\", payload: proDetails })\r\n    }\r\n}\r\nexport const ProductActionCurrency = (curr) => {\r\n    return async (dispatch) => {\r\n        var fetchCurr = await fetch(`https://api.exchangeratesapi.io/latest?base=${curr}`)\r\n        var toJson = await fetchCurr.json()\r\n        var checkCurr;\r\n        { curr === \"INR\" ? checkCurr = toJson.rates[\"INR\"] : checkCurr = toJson.rates[\"INR\"] }\r\n        dispatch({ type: \"GET_CURR\", payload: [curr, checkCurr] })\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport \"../css/HomePage.css\";\r\nimport \"../css/Currency.css\"\r\nimport { connect } from \"react-redux\";\r\nimport { dataAction, ProductActionCurrency } from \"../actions/ProductAction\";\r\nclass HomePage extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.proData()\r\n        this.props.currencyToProps(\"INR\")\r\n    }\r\n    render() {\r\n        var dataAppened = this.props.dataFromReducer;\r\n        var currAppend = this.props.currncyFromReducer;\r\n        return (\r\n            <section className=\"product_box\">\r\n                <article className=\"product_display\">\r\n                    <div className=\"row\">\r\n                        {dataAppened !== \"\" ?\r\n                            dataAppened.map((item, index) => (\r\n                                <div key={index} className=\"col-lg-4 col-md-6 col-sm-6 col-xs-12\">\r\n                                    <div className=\"cart\">\r\n                                        <img src={item.image} alt=\"hi\" />\r\n                                        <h6>{item.name}</h6>\r\n                                        <h6>{currAppend[0] === \"INR\" ?\r\n                                            <span> <i className=\"fa fa-inr\" aria-hidden=\"true\"></i> {(item.price / parseInt(currAppend[1])).toFixed(2)} </span>\r\n                                            : \"$ \" + (item.price / parseInt(currAppend[1])).toFixed(2)}</h6>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                            : \"Loading...\"}\r\n                    </div>\r\n                </article>\r\n                <article className=\"currency_display\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-4\">\r\n                            Currency\r\n                        </div>\r\n                        <div className=\"col-sm-8\">\r\n                            <select className=\"custom-select\" id=\"inputGroupSelect01\" onChange={(e) => this.props.currencyToProps(e.target.value)}>\r\n                                <option value=\"INR\">INR</option>\r\n                                <option value=\"USD\">USD</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                </article >\r\n            </section>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dataFromReducer: state.data,\r\n        currncyFromReducer: state.currncy\r\n    }\r\n}\r\nconst dispatchStateToProps = (dispatch) => {\r\n    return {\r\n        proData: () => {\r\n            dispatch(dataAction())\r\n        },\r\n        currencyToProps: (curr) => {\r\n            dispatch(ProductActionCurrency(curr))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, dispatchStateToProps)(HomePage);","import React from 'react';\nimport './App.css';\nimport Navbar from \"./component/Navbar\";\nimport HomePage from \"./component/HomePage\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <HomePage />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const productState = {\r\n    data: \"\",\r\n    currncy: 1\r\n}\r\n\r\nconst ProductReducer = (state = productState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case \"GET_DATA\":\r\n            return {\r\n                ...state,\r\n                data: action.payload\r\n            }\r\n            break;\r\n\r\n        case \"GET_CURR\":\r\n            return {\r\n                ...state,\r\n                currncy: action.payload\r\n            }\r\n            break;\r\n\r\n    }\r\n    return state;\r\n}\r\nexport default ProductReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";// to perform asyuc task or performance\nimport ProductReducer from \"./reducers/ProductReducer\";\n\nconst store = createStore(ProductReducer, applyMiddleware(thunk));\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}